
MCU2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008f2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000966  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  00000966  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000966  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000998  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  000009d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000122c  00000000  00000000  00000b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b03  00000000  00000000  00001d88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b5a  00000000  00000000  0000288b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a4  00000000  00000000  000033e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005fb  00000000  00000000  0000368c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000068e  00000000  00000000  00003c87  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00004315  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
   8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
   c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  10:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  14:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  18:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  1c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  20:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  24:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__vector_9>
  28:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  2c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  30:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  34:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  38:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  3c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  40:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  44:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  48:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  4c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  50:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  54:	e0 00       	.word	0x00e0	; ????
  56:	f9 00       	.word	0x00f9	; ????
  58:	12 01       	movw	r2, r4
  5a:	2b 01       	movw	r4, r22
  5c:	43 01       	movw	r8, r6
  5e:	43 01       	movw	r8, r6
  60:	43 01       	movw	r8, r6
  62:	43 01       	movw	r8, r6
  64:	43 01       	movw	r8, r6
  66:	43 01       	movw	r8, r6
  68:	43 01       	movw	r8, r6
  6a:	43 01       	movw	r8, r6
  6c:	43 01       	movw	r8, r6
  6e:	43 01       	movw	r8, r6
  70:	43 01       	movw	r8, r6
  72:	43 01       	movw	r8, r6
  74:	43 01       	movw	r8, r6
  76:	43 01       	movw	r8, r6
  78:	43 01       	movw	r8, r6
  7a:	43 01       	movw	r8, r6
  7c:	43 01       	movw	r8, r6
  7e:	43 01       	movw	r8, r6
  80:	43 01       	movw	r8, r6
  82:	43 01       	movw	r8, r6
  84:	43 01       	movw	r8, r6
  86:	43 01       	movw	r8, r6
  88:	43 01       	movw	r8, r6
  8a:	43 01       	movw	r8, r6
  8c:	43 01       	movw	r8, r6
  8e:	43 01       	movw	r8, r6
  90:	43 01       	movw	r8, r6
  92:	43 01       	movw	r8, r6
  94:	e0 00       	.word	0x00e0	; ????
  96:	f9 00       	.word	0x00f9	; ????
  98:	12 01       	movw	r2, r4
  9a:	2b 01       	movw	r4, r22
  9c:	50 01       	movw	r10, r0
  9e:	69 01       	movw	r12, r18
  a0:	82 01       	movw	r16, r4
  a2:	9b 01       	movw	r18, r22
  a4:	b3 01       	movw	r22, r6
  a6:	b3 01       	movw	r22, r6
  a8:	b3 01       	movw	r22, r6
  aa:	b3 01       	movw	r22, r6
  ac:	b3 01       	movw	r22, r6
  ae:	b3 01       	movw	r22, r6
  b0:	b3 01       	movw	r22, r6
  b2:	b3 01       	movw	r22, r6
  b4:	b3 01       	movw	r22, r6
  b6:	b3 01       	movw	r22, r6
  b8:	b3 01       	movw	r22, r6
  ba:	b3 01       	movw	r22, r6
  bc:	b3 01       	movw	r22, r6
  be:	b3 01       	movw	r22, r6
  c0:	b3 01       	movw	r22, r6
  c2:	b3 01       	movw	r22, r6
  c4:	b3 01       	movw	r22, r6
  c6:	b3 01       	movw	r22, r6
  c8:	b3 01       	movw	r22, r6
  ca:	b3 01       	movw	r22, r6
  cc:	b3 01       	movw	r22, r6
  ce:	b3 01       	movw	r22, r6
  d0:	b3 01       	movw	r22, r6
  d2:	b3 01       	movw	r22, r6
  d4:	b3 01       	movw	r22, r6
  d6:	b3 01       	movw	r22, r6
  d8:	b3 01       	movw	r22, r6
  da:	b3 01       	movw	r22, r6
  dc:	50 01       	movw	r10, r0
  de:	69 01       	movw	r12, r18
  e0:	82 01       	movw	r16, r4
  e2:	9b 01       	movw	r18, r22

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf e5       	ldi	r28, 0x5F	; 95
  ea:	d8 e0       	ldi	r29, 0x08	; 8
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_clear_bss>:
  f0:	20 e0       	ldi	r18, 0x00	; 0
  f2:	a0 e6       	ldi	r26, 0x60	; 96
  f4:	b0 e0       	ldi	r27, 0x00	; 0
  f6:	01 c0       	rjmp	.+2      	; 0xfa <.do_clear_bss_start>

000000f8 <.do_clear_bss_loop>:
  f8:	1d 92       	st	X+, r1

000000fa <.do_clear_bss_start>:
  fa:	a4 36       	cpi	r26, 0x64	; 100
  fc:	b2 07       	cpc	r27, r18
  fe:	e1 f7       	brne	.-8      	; 0xf8 <.do_clear_bss_loop>
 100:	0e 94 1b 02 	call	0x436	; 0x436 <main>
 104:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <_exit>

00000108 <__bad_interrupt>:
 108:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010c <motor_init>:
 10c:	41 e0       	ldi	r20, 0x01	; 1
 10e:	63 e0       	ldi	r22, 0x03	; 3
 110:	82 e4       	ldi	r24, 0x42	; 66
 112:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <DIO_vSetPinDirection>
 116:	41 e0       	ldi	r20, 0x01	; 1
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	81 e4       	ldi	r24, 0x41	; 65
 11c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <DIO_vSetPinDirection>
 120:	41 e0       	ldi	r20, 0x01	; 1
 122:	61 e0       	ldi	r22, 0x01	; 1
 124:	81 e4       	ldi	r24, 0x41	; 65
 126:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <DIO_vSetPinDirection>
 12a:	41 e0       	ldi	r20, 0x01	; 1
 12c:	60 e0       	ldi	r22, 0x00	; 0
 12e:	81 e4       	ldi	r24, 0x41	; 65
 130:	0e 94 44 01 	call	0x288	; 0x288 <DIO_vSetPinValue>
 134:	40 e0       	ldi	r20, 0x00	; 0
 136:	61 e0       	ldi	r22, 0x01	; 1
 138:	81 e4       	ldi	r24, 0x41	; 65
 13a:	0e 94 44 01 	call	0x288	; 0x288 <DIO_vSetPinValue>
 13e:	8a e6       	ldi	r24, 0x6A	; 106
 140:	83 bf       	out	0x33, r24	; 51
 142:	08 95       	ret

00000144 <motor_setspeed>:
 144:	8c bf       	out	0x3c, r24	; 60
 146:	08 95       	ret

00000148 <TURN_ON_LED>:
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	c8 2f       	mov	r28, r24
 14e:	d6 2f       	mov	r29, r22
 150:	41 e0       	ldi	r20, 0x01	; 1
 152:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <DIO_vSetPinDirection>
 156:	41 e0       	ldi	r20, 0x01	; 1
 158:	6d 2f       	mov	r22, r29
 15a:	8c 2f       	mov	r24, r28
 15c:	0e 94 44 01 	call	0x288	; 0x288 <DIO_vSetPinValue>
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	08 95       	ret

00000166 <TURN_Off_LED>:
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	c8 2f       	mov	r28, r24
 16c:	d6 2f       	mov	r29, r22
 16e:	41 e0       	ldi	r20, 0x01	; 1
 170:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <DIO_vSetPinDirection>
 174:	40 e0       	ldi	r20, 0x00	; 0
 176:	6d 2f       	mov	r22, r29
 178:	8c 2f       	mov	r24, r28
 17a:	0e 94 44 01 	call	0x288	; 0x288 <DIO_vSetPinValue>
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <ADC_init>:
 184:	80 e4       	ldi	r24, 0x40	; 64
 186:	87 b9       	out	0x07, r24	; 7
 188:	87 e8       	ldi	r24, 0x87	; 135
 18a:	86 b9       	out	0x06, r24	; 6
 18c:	08 95       	ret

0000018e <ADC_read>:
 18e:	87 70       	andi	r24, 0x07	; 7
 190:	97 b1       	in	r25, 0x07	; 7
 192:	98 7f       	andi	r25, 0xF8	; 248
 194:	89 2b       	or	r24, r25
 196:	87 b9       	out	0x07, r24	; 7
 198:	86 b1       	in	r24, 0x06	; 6
 19a:	80 64       	ori	r24, 0x40	; 64
 19c:	86 b9       	out	0x06, r24	; 6
 19e:	36 99       	sbic	0x06, 6	; 6
 1a0:	fe cf       	rjmp	.-4      	; 0x19e <ADC_read+0x10>
 1a2:	84 b1       	in	r24, 0x04	; 4
 1a4:	95 b1       	in	r25, 0x05	; 5
 1a6:	08 95       	ret

000001a8 <DIO_vSetPinDirection>:
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	fc 01       	movw	r30, r24
 1ac:	e1 54       	subi	r30, 0x41	; 65
 1ae:	f1 09       	sbc	r31, r1
 1b0:	e4 32       	cpi	r30, 0x24	; 36
 1b2:	f1 05       	cpc	r31, r1
 1b4:	08 f0       	brcs	.+2      	; 0x1b8 <DIO_vSetPinDirection+0x10>
 1b6:	67 c0       	rjmp	.+206    	; 0x286 <DIO_vSetPinDirection+0xde>
 1b8:	e6 5d       	subi	r30, 0xD6	; 214
 1ba:	ff 4f       	sbci	r31, 0xFF	; 255
 1bc:	0c 94 4e 04 	jmp	0x89c	; 0x89c <__tablejump2__>
 1c0:	44 23       	and	r20, r20
 1c2:	59 f0       	breq	.+22     	; 0x1da <DIO_vSetPinDirection+0x32>
 1c4:	2a b3       	in	r18, 0x1a	; 26
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <DIO_vSetPinDirection+0x28>
 1cc:	88 0f       	add	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	6a 95       	dec	r22
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <DIO_vSetPinDirection+0x24>
 1d4:	82 2b       	or	r24, r18
 1d6:	8a bb       	out	0x1a, r24	; 26
 1d8:	08 95       	ret
 1da:	2a b3       	in	r18, 0x1a	; 26
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <DIO_vSetPinDirection+0x3e>
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	6a 95       	dec	r22
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <DIO_vSetPinDirection+0x3a>
 1ea:	80 95       	com	r24
 1ec:	82 23       	and	r24, r18
 1ee:	8a bb       	out	0x1a, r24	; 26
 1f0:	08 95       	ret
 1f2:	44 23       	and	r20, r20
 1f4:	59 f0       	breq	.+22     	; 0x20c <DIO_vSetPinDirection+0x64>
 1f6:	27 b3       	in	r18, 0x17	; 23
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_vSetPinDirection+0x5a>
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	6a 95       	dec	r22
 204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_vSetPinDirection+0x56>
 206:	82 2b       	or	r24, r18
 208:	87 bb       	out	0x17, r24	; 23
 20a:	08 95       	ret
 20c:	27 b3       	in	r18, 0x17	; 23
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	02 c0       	rjmp	.+4      	; 0x218 <DIO_vSetPinDirection+0x70>
 214:	88 0f       	add	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	6a 95       	dec	r22
 21a:	e2 f7       	brpl	.-8      	; 0x214 <DIO_vSetPinDirection+0x6c>
 21c:	80 95       	com	r24
 21e:	82 23       	and	r24, r18
 220:	87 bb       	out	0x17, r24	; 23
 222:	08 95       	ret
 224:	44 23       	and	r20, r20
 226:	59 f0       	breq	.+22     	; 0x23e <DIO_vSetPinDirection+0x96>
 228:	24 b3       	in	r18, 0x14	; 20
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	02 c0       	rjmp	.+4      	; 0x234 <DIO_vSetPinDirection+0x8c>
 230:	88 0f       	add	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	6a 95       	dec	r22
 236:	e2 f7       	brpl	.-8      	; 0x230 <DIO_vSetPinDirection+0x88>
 238:	82 2b       	or	r24, r18
 23a:	84 bb       	out	0x14, r24	; 20
 23c:	08 95       	ret
 23e:	24 b3       	in	r18, 0x14	; 20
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	02 c0       	rjmp	.+4      	; 0x24a <DIO_vSetPinDirection+0xa2>
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	6a 95       	dec	r22
 24c:	e2 f7       	brpl	.-8      	; 0x246 <DIO_vSetPinDirection+0x9e>
 24e:	80 95       	com	r24
 250:	82 23       	and	r24, r18
 252:	84 bb       	out	0x14, r24	; 20
 254:	08 95       	ret
 256:	44 23       	and	r20, r20
 258:	59 f0       	breq	.+22     	; 0x270 <DIO_vSetPinDirection+0xc8>
 25a:	21 b3       	in	r18, 0x11	; 17
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	02 c0       	rjmp	.+4      	; 0x266 <DIO_vSetPinDirection+0xbe>
 262:	88 0f       	add	r24, r24
 264:	99 1f       	adc	r25, r25
 266:	6a 95       	dec	r22
 268:	e2 f7       	brpl	.-8      	; 0x262 <DIO_vSetPinDirection+0xba>
 26a:	82 2b       	or	r24, r18
 26c:	81 bb       	out	0x11, r24	; 17
 26e:	08 95       	ret
 270:	21 b3       	in	r18, 0x11	; 17
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	02 c0       	rjmp	.+4      	; 0x27c <DIO_vSetPinDirection+0xd4>
 278:	88 0f       	add	r24, r24
 27a:	99 1f       	adc	r25, r25
 27c:	6a 95       	dec	r22
 27e:	e2 f7       	brpl	.-8      	; 0x278 <DIO_vSetPinDirection+0xd0>
 280:	80 95       	com	r24
 282:	82 23       	and	r24, r18
 284:	81 bb       	out	0x11, r24	; 17
 286:	08 95       	ret

00000288 <DIO_vSetPinValue>:
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	fc 01       	movw	r30, r24
 28c:	e1 54       	subi	r30, 0x41	; 65
 28e:	f1 09       	sbc	r31, r1
 290:	e4 32       	cpi	r30, 0x24	; 36
 292:	f1 05       	cpc	r31, r1
 294:	08 f0       	brcs	.+2      	; 0x298 <DIO_vSetPinValue+0x10>
 296:	67 c0       	rjmp	.+206    	; 0x366 <DIO_vSetPinValue+0xde>
 298:	e2 5b       	subi	r30, 0xB2	; 178
 29a:	ff 4f       	sbci	r31, 0xFF	; 255
 29c:	0c 94 4e 04 	jmp	0x89c	; 0x89c <__tablejump2__>
 2a0:	44 23       	and	r20, r20
 2a2:	59 f0       	breq	.+22     	; 0x2ba <DIO_vSetPinValue+0x32>
 2a4:	2b b3       	in	r18, 0x1b	; 27
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <DIO_vSetPinValue+0x28>
 2ac:	88 0f       	add	r24, r24
 2ae:	99 1f       	adc	r25, r25
 2b0:	6a 95       	dec	r22
 2b2:	e2 f7       	brpl	.-8      	; 0x2ac <DIO_vSetPinValue+0x24>
 2b4:	82 2b       	or	r24, r18
 2b6:	8b bb       	out	0x1b, r24	; 27
 2b8:	08 95       	ret
 2ba:	2b b3       	in	r18, 0x1b	; 27
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <DIO_vSetPinValue+0x3e>
 2c2:	88 0f       	add	r24, r24
 2c4:	99 1f       	adc	r25, r25
 2c6:	6a 95       	dec	r22
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <DIO_vSetPinValue+0x3a>
 2ca:	80 95       	com	r24
 2cc:	82 23       	and	r24, r18
 2ce:	8b bb       	out	0x1b, r24	; 27
 2d0:	08 95       	ret
 2d2:	44 23       	and	r20, r20
 2d4:	59 f0       	breq	.+22     	; 0x2ec <DIO_vSetPinValue+0x64>
 2d6:	28 b3       	in	r18, 0x18	; 24
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <DIO_vSetPinValue+0x5a>
 2de:	88 0f       	add	r24, r24
 2e0:	99 1f       	adc	r25, r25
 2e2:	6a 95       	dec	r22
 2e4:	e2 f7       	brpl	.-8      	; 0x2de <DIO_vSetPinValue+0x56>
 2e6:	82 2b       	or	r24, r18
 2e8:	88 bb       	out	0x18, r24	; 24
 2ea:	08 95       	ret
 2ec:	28 b3       	in	r18, 0x18	; 24
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <DIO_vSetPinValue+0x70>
 2f4:	88 0f       	add	r24, r24
 2f6:	99 1f       	adc	r25, r25
 2f8:	6a 95       	dec	r22
 2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <DIO_vSetPinValue+0x6c>
 2fc:	80 95       	com	r24
 2fe:	82 23       	and	r24, r18
 300:	88 bb       	out	0x18, r24	; 24
 302:	08 95       	ret
 304:	44 23       	and	r20, r20
 306:	59 f0       	breq	.+22     	; 0x31e <DIO_vSetPinValue+0x96>
 308:	25 b3       	in	r18, 0x15	; 21
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	02 c0       	rjmp	.+4      	; 0x314 <DIO_vSetPinValue+0x8c>
 310:	88 0f       	add	r24, r24
 312:	99 1f       	adc	r25, r25
 314:	6a 95       	dec	r22
 316:	e2 f7       	brpl	.-8      	; 0x310 <DIO_vSetPinValue+0x88>
 318:	82 2b       	or	r24, r18
 31a:	85 bb       	out	0x15, r24	; 21
 31c:	08 95       	ret
 31e:	25 b3       	in	r18, 0x15	; 21
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	02 c0       	rjmp	.+4      	; 0x32a <DIO_vSetPinValue+0xa2>
 326:	88 0f       	add	r24, r24
 328:	99 1f       	adc	r25, r25
 32a:	6a 95       	dec	r22
 32c:	e2 f7       	brpl	.-8      	; 0x326 <DIO_vSetPinValue+0x9e>
 32e:	80 95       	com	r24
 330:	82 23       	and	r24, r18
 332:	85 bb       	out	0x15, r24	; 21
 334:	08 95       	ret
 336:	44 23       	and	r20, r20
 338:	59 f0       	breq	.+22     	; 0x350 <DIO_vSetPinValue+0xc8>
 33a:	22 b3       	in	r18, 0x12	; 18
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	02 c0       	rjmp	.+4      	; 0x346 <DIO_vSetPinValue+0xbe>
 342:	88 0f       	add	r24, r24
 344:	99 1f       	adc	r25, r25
 346:	6a 95       	dec	r22
 348:	e2 f7       	brpl	.-8      	; 0x342 <DIO_vSetPinValue+0xba>
 34a:	82 2b       	or	r24, r18
 34c:	82 bb       	out	0x12, r24	; 18
 34e:	08 95       	ret
 350:	22 b3       	in	r18, 0x12	; 18
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	02 c0       	rjmp	.+4      	; 0x35c <DIO_vSetPinValue+0xd4>
 358:	88 0f       	add	r24, r24
 35a:	99 1f       	adc	r25, r25
 35c:	6a 95       	dec	r22
 35e:	e2 f7       	brpl	.-8      	; 0x358 <DIO_vSetPinValue+0xd0>
 360:	80 95       	com	r24
 362:	82 23       	and	r24, r18
 364:	82 bb       	out	0x12, r24	; 18
 366:	08 95       	ret

00000368 <uart_init>:
	UBRRL = 0x33;
}

void uart_send(u8 data) {
	while (!(UCSRA & (1 << UDRE)));// Wait for the transmit buffer to be empty
	UDR = data;
 368:	88 e1       	ldi	r24, 0x18	; 24
 36a:	8a b9       	out	0x0a, r24	; 10
 36c:	86 e8       	ldi	r24, 0x86	; 134
 36e:	80 bd       	out	0x20, r24	; 32
 370:	83 e3       	ldi	r24, 0x33	; 51
 372:	89 b9       	out	0x09, r24	; 9
 374:	08 95       	ret

00000376 <uart_receive>:
}
u8 uart_receive(){
	while (!(UCSRA & (1 << RXC)));//Wait for data to be received
 376:	5f 9b       	sbis	0x0b, 7	; 11
 378:	fe cf       	rjmp	.-4      	; 0x376 <uart_receive>
	return UDR;
 37a:	8c b1       	in	r24, 0x0c	; 12
}
 37c:	08 95       	ret

0000037e <shut_machine_down>:
#define RED_LED 0 //portc
#define YELLOW_LED 1 //portc
#define GREEN_LED 2 //porta
#define BUZZER 3 //portb
void shut_machine_down(u8 temp){
	motor_setspeed(0);
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	0e 94 a2 00 	call	0x144	; 0x144 <motor_setspeed>
 384:	ff cf       	rjmp	.-2      	; 0x384 <shut_machine_down+0x6>

00000386 <checkMessage>:
	while(1);
}
u8 checkMessage(u8 mess){
 386:	cf 93       	push	r28
 388:	c8 2f       	mov	r28, r24
	u8 mess1 = uart_receive();
 38a:	0e 94 bb 01 	call	0x376	; 0x376 <uart_receive>
	if(mess == 's' && mess1 == 't'){
 38e:	c3 37       	cpi	r28, 0x73	; 115
 390:	29 f4       	brne	.+10     	; 0x39c <checkMessage+0x16>
 392:	84 37       	cpi	r24, 0x74	; 116
 394:	19 f4       	brne	.+6      	; 0x39c <checkMessage+0x16>
		shut_machine_down(mess);
 396:	8c 2f       	mov	r24, r28
 398:	0e 94 bf 01 	call	0x37e	; 0x37e <shut_machine_down>
		return 0;
	}
	return mess1/2.01;
 39c:	68 2f       	mov	r22, r24
 39e:	70 e0       	ldi	r23, 0x00	; 0
 3a0:	80 e0       	ldi	r24, 0x00	; 0
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	0e 94 ae 03 	call	0x75c	; 0x75c <__floatsisf>
 3a8:	27 ed       	ldi	r18, 0xD7	; 215
 3aa:	33 ea       	ldi	r19, 0xA3	; 163
 3ac:	40 e0       	ldi	r20, 0x00	; 0
 3ae:	50 e4       	ldi	r21, 0x40	; 64
 3b0:	0e 94 0b 03 	call	0x616	; 0x616 <__divsf3>
 3b4:	0e 94 7d 03 	call	0x6fa	; 0x6fa <__fixunssfsi>
 3b8:	86 2f       	mov	r24, r22
}
 3ba:	cf 91       	pop	r28
 3bc:	08 95       	ret

000003be <set_state>:
void set_state(u8 temp){
	if(temp <= 20){// if temp less than 20 turn on green
 3be:	85 31       	cpi	r24, 0x15	; 21
 3c0:	90 f4       	brcc	.+36     	; 0x3e6 <set_state+0x28>
		TURN_ON_LED('A',GREEN_LED);
 3c2:	62 e0       	ldi	r22, 0x02	; 2
 3c4:	81 e4       	ldi	r24, 0x41	; 65
 3c6:	0e 94 a4 00 	call	0x148	; 0x148 <TURN_ON_LED>
		TURN_Off_LED('C',RED_LED);
 3ca:	60 e0       	ldi	r22, 0x00	; 0
 3cc:	83 e4       	ldi	r24, 0x43	; 67
 3ce:	0e 94 b3 00 	call	0x166	; 0x166 <TURN_Off_LED>
		TURN_Off_LED('C',YELLOW_LED);
 3d2:	61 e0       	ldi	r22, 0x01	; 1
 3d4:	83 e4       	ldi	r24, 0x43	; 67
 3d6:	0e 94 b3 00 	call	0x166	; 0x166 <TURN_Off_LED>
		DIO_vSetPinValue('A',BUZZER,1);
 3da:	41 e0       	ldi	r20, 0x01	; 1
 3dc:	63 e0       	ldi	r22, 0x03	; 3
 3de:	81 e4       	ldi	r24, 0x41	; 65
 3e0:	0e 94 44 01 	call	0x288	; 0x288 <DIO_vSetPinValue>
 3e4:	08 95       	ret
	}else{
		if(temp <= 40){// if temp greater than 20 and less than 40 turn on yellow
 3e6:	89 32       	cpi	r24, 0x29	; 41
 3e8:	90 f4       	brcc	.+36     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
			TURN_Off_LED('A',GREEN_LED);
 3ea:	62 e0       	ldi	r22, 0x02	; 2
 3ec:	81 e4       	ldi	r24, 0x41	; 65
 3ee:	0e 94 b3 00 	call	0x166	; 0x166 <TURN_Off_LED>
			TURN_Off_LED('C',RED_LED);
 3f2:	60 e0       	ldi	r22, 0x00	; 0
 3f4:	83 e4       	ldi	r24, 0x43	; 67
 3f6:	0e 94 b3 00 	call	0x166	; 0x166 <TURN_Off_LED>
			TURN_ON_LED('C',YELLOW_LED);
 3fa:	61 e0       	ldi	r22, 0x01	; 1
 3fc:	83 e4       	ldi	r24, 0x43	; 67
 3fe:	0e 94 a4 00 	call	0x148	; 0x148 <TURN_ON_LED>
			DIO_vSetPinValue('A',BUZZER,1);
 402:	41 e0       	ldi	r20, 0x01	; 1
 404:	63 e0       	ldi	r22, 0x03	; 3
 406:	81 e4       	ldi	r24, 0x41	; 65
 408:	0e 94 44 01 	call	0x288	; 0x288 <DIO_vSetPinValue>
 40c:	08 95       	ret
		}else{
			if(temp <= 50){//Emergency state red is glow
 40e:	83 33       	cpi	r24, 0x33	; 51
 410:	88 f4       	brcc	.+34     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
				TURN_Off_LED('A',GREEN_LED);
 412:	62 e0       	ldi	r22, 0x02	; 2
 414:	81 e4       	ldi	r24, 0x41	; 65
 416:	0e 94 b3 00 	call	0x166	; 0x166 <TURN_Off_LED>
				TURN_ON_LED('C',RED_LED);
 41a:	60 e0       	ldi	r22, 0x00	; 0
 41c:	83 e4       	ldi	r24, 0x43	; 67
 41e:	0e 94 a4 00 	call	0x148	; 0x148 <TURN_ON_LED>
				TURN_Off_LED('C',YELLOW_LED);
 422:	61 e0       	ldi	r22, 0x01	; 1
 424:	83 e4       	ldi	r24, 0x43	; 67
 426:	0e 94 b3 00 	call	0x166	; 0x166 <TURN_Off_LED>
				DIO_vSetPinValue('A',BUZZER,0);
 42a:	40 e0       	ldi	r20, 0x00	; 0
 42c:	63 e0       	ldi	r22, 0x03	; 3
 42e:	81 e4       	ldi	r24, 0x41	; 65
 430:	0e 94 44 01 	call	0x288	; 0x288 <DIO_vSetPinValue>
 434:	08 95       	ret

00000436 <main>:
			}
		}
	}
}
int main(){
	uart_init();// initializing uart
 436:	0e 94 b4 01 	call	0x368	; 0x368 <uart_init>
	ADC_init();//initializing adc
 43a:	0e 94 c2 00 	call	0x184	; 0x184 <ADC_init>
	motor_init();//initializing motor
 43e:	0e 94 86 00 	call	0x10c	; 0x10c <motor_init>
	Timer1_Init();
 442:	0e 94 a8 02 	call	0x550	; 0x550 <Timer1_Init>
	Servo_Init();
 446:	0e 94 48 02 	call	0x490	; 0x490 <Servo_Init>
	DIO_vSetPinDirection('A',BUZZER,1);//set buzzer as output
 44a:	41 e0       	ldi	r20, 0x01	; 1
 44c:	63 e0       	ldi	r22, 0x03	; 3
 44e:	81 e4       	ldi	r24, 0x41	; 65
 450:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <DIO_vSetPinDirection>
	u8 Temprature = checkMessage(uart_receive());//read temp and check if the message is not to shutdown
 454:	0e 94 bb 01 	call	0x376	; 0x376 <uart_receive>
 458:	0e 94 c3 01 	call	0x386	; 0x386 <checkMessage>
	u8 pot = ADC_read(POT_PIN);//read potentiometer
 45c:	87 e0       	ldi	r24, 0x07	; 7
 45e:	0e 94 c7 00 	call	0x18e	; 0x18e <ADC_read>
	while(1){
		Temprature = checkMessage(uart_receive());//get temp value after checking if its a real temp value or a code to shut down
 462:	0e 94 bb 01 	call	0x376	; 0x376 <uart_receive>
 466:	0e 94 c3 01 	call	0x386	; 0x386 <checkMessage>
 46a:	c8 2f       	mov	r28, r24
		set_state(Temprature);
 46c:	0e 94 df 01 	call	0x3be	; 0x3be <set_state>
		pot = ADC_read(POT_PIN);//read potentiometer
 470:	87 e0       	ldi	r24, 0x07	; 7
 472:	0e 94 c7 00 	call	0x18e	; 0x18e <ADC_read>
		if(Temprature < 50){
 476:	c2 33       	cpi	r28, 0x32	; 50
 478:	28 f4       	brcc	.+10     	; 0x484 <main+0x4e>
			motor_setspeed(pot);//take pot reading as speed of machine
 47a:	0e 94 a2 00 	call	0x144	; 0x144 <motor_setspeed>
			Timer1_Stop();
 47e:	0e 94 b4 02 	call	0x568	; 0x568 <Timer1_Stop>
 482:	ef cf       	rjmp	.-34     	; 0x462 <main+0x2c>
		}else{
			Timer1_Start();//start the timer to count
 484:	0e 94 b0 02 	call	0x560	; 0x560 <Timer1_Start>
			motor_setspeed(0);
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	0e 94 a2 00 	call	0x144	; 0x144 <motor_setspeed>
 48e:	e9 cf       	rjmp	.-46     	; 0x462 <main+0x2c>

00000490 <Servo_Init>:
#define SERVO_90      1500 // Pulse width for 90 degrees in us
#define OUTPUT 1
#define INPUT 0

void Servo_Init() {
	DIO_vSetPinDirection('D',SERVO_PIN,OUTPUT);
 490:	41 e0       	ldi	r20, 0x01	; 1
 492:	50 e0       	ldi	r21, 0x00	; 0
 494:	67 e0       	ldi	r22, 0x07	; 7
 496:	70 e0       	ldi	r23, 0x00	; 0
 498:	84 e4       	ldi	r24, 0x44	; 68
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <DIO_vSetPinDirection>
	
	TCCR2 = (1 << WGM20) | (1 << COM21) | (1 << CS21);
 4a0:	82 e6       	ldi	r24, 0x62	; 98
 4a2:	85 bd       	out	0x25, r24	; 37
 4a4:	08 95       	ret

000004a6 <Servo_SetAngle>:
void Servo_SetAngle(uint8_t angle) {
	uint16_t pulse_width_us;
	uint8_t ocr2_value;

	// Map angle to pulse width (in us)
	if (angle == 90) {
 4a6:	8a 35       	cpi	r24, 0x5A	; 90
 4a8:	19 f1       	breq	.+70     	; 0x4f0 <Servo_SetAngle+0x4a>
		pulse_width_us = SERVO_90;
		} else if (angle < 90) {
 4aa:	8a 35       	cpi	r24, 0x5A	; 90
 4ac:	70 f4       	brcc	.+28     	; 0x4ca <Servo_SetAngle+0x24>
		// Map angle from 0 to 90 degrees to pulse width range
		pulse_width_us = SERVO_MIN + (SERVO_90 - SERVO_MIN) * angle / 90;
 4ae:	44 ef       	ldi	r20, 0xF4	; 244
 4b0:	51 e0       	ldi	r21, 0x01	; 1
 4b2:	84 9f       	mul	r24, r20
 4b4:	90 01       	movw	r18, r0
 4b6:	85 9f       	mul	r24, r21
 4b8:	30 0d       	add	r19, r0
 4ba:	11 24       	eor	r1, r1
 4bc:	c9 01       	movw	r24, r18
 4be:	6a e5       	ldi	r22, 0x5A	; 90
 4c0:	70 e0       	ldi	r23, 0x00	; 0
 4c2:	0e 94 3a 04 	call	0x874	; 0x874 <__divmodhi4>
 4c6:	68 51       	subi	r22, 0x18	; 24
 4c8:	14 c0       	rjmp	.+40     	; 0x4f2 <Servo_SetAngle+0x4c>
		} else {
		// Map angle from 90 to 180 degrees to pulse width range
		pulse_width_us = SERVO_90 + (SERVO_MAX - SERVO_90) * (angle - 90) / 90;
 4ca:	28 2f       	mov	r18, r24
 4cc:	30 e0       	ldi	r19, 0x00	; 0
 4ce:	2a 55       	subi	r18, 0x5A	; 90
 4d0:	31 09       	sbc	r19, r1
 4d2:	44 ef       	ldi	r20, 0xF4	; 244
 4d4:	51 e0       	ldi	r21, 0x01	; 1
 4d6:	24 9f       	mul	r18, r20
 4d8:	c0 01       	movw	r24, r0
 4da:	25 9f       	mul	r18, r21
 4dc:	90 0d       	add	r25, r0
 4de:	34 9f       	mul	r19, r20
 4e0:	90 0d       	add	r25, r0
 4e2:	11 24       	eor	r1, r1
 4e4:	6a e5       	ldi	r22, 0x5A	; 90
 4e6:	70 e0       	ldi	r23, 0x00	; 0
 4e8:	0e 94 3a 04 	call	0x874	; 0x874 <__divmodhi4>
 4ec:	64 52       	subi	r22, 0x24	; 36
 4ee:	01 c0       	rjmp	.+2      	; 0x4f2 <Servo_SetAngle+0x4c>
	uint16_t pulse_width_us;
	uint8_t ocr2_value;

	// Map angle to pulse width (in us)
	if (angle == 90) {
		pulse_width_us = SERVO_90;
 4f0:	6c ed       	ldi	r22, 0xDC	; 220
	
	// Calculate OCR2 value for pulse width
	// Timer2 frequency = F_CPU / 8 / 256 = 19531.25 Hz
	// PWM period = 1 / 50 Hz = 20 ms
	// Pulse width in Timer2 ticks = (pulse_width_us / PWM period) * 256
	ocr2_value = (pulse_width_us * 256 / 20000) - 1;
 4f2:	20 e0       	ldi	r18, 0x00	; 0
 4f4:	30 e0       	ldi	r19, 0x00	; 0
 4f6:	36 2f       	mov	r19, r22
 4f8:	36 95       	lsr	r19
 4fa:	27 95       	ror	r18
 4fc:	32 95       	swap	r19
 4fe:	22 95       	swap	r18
 500:	2f 70       	andi	r18, 0x0F	; 15
 502:	23 27       	eor	r18, r19
 504:	3f 70       	andi	r19, 0x0F	; 15
 506:	23 27       	eor	r18, r19
 508:	a7 e4       	ldi	r26, 0x47	; 71
 50a:	b3 e0       	ldi	r27, 0x03	; 3
 50c:	0e 94 54 04 	call	0x8a8	; 0x8a8 <__umulhisi3>
 510:	96 95       	lsr	r25
 512:	87 95       	ror	r24
 514:	96 95       	lsr	r25
 516:	87 95       	ror	r24
 518:	96 95       	lsr	r25
 51a:	87 95       	ror	r24
 51c:	81 50       	subi	r24, 0x01	; 1
	
	OCR2 = ocr2_value;// Set the OCR2 register
 51e:	83 bd       	out	0x23, r24	; 35
 520:	08 95       	ret

00000522 <Servo_Rotate>:
}
void Servo_Rotate(u8 ang){
 522:	cf 93       	push	r28
 524:	df 93       	push	r29
 526:	d8 2f       	mov	r29, r24
	for (uint8_t angle = 0; angle <= ang; angle++) {
 528:	c0 e0       	ldi	r28, 0x00	; 0
 52a:	0d c0       	rjmp	.+26     	; 0x546 <Servo_Rotate+0x24>
		Servo_SetAngle(angle);
 52c:	8c 2f       	mov	r24, r28
 52e:	0e 94 53 02 	call	0x4a6	; 0x4a6 <Servo_SetAngle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 532:	2f ed       	ldi	r18, 0xDF	; 223
 534:	83 e9       	ldi	r24, 0x93	; 147
 536:	94 e0       	ldi	r25, 0x04	; 4
 538:	21 50       	subi	r18, 0x01	; 1
 53a:	80 40       	sbci	r24, 0x00	; 0
 53c:	90 40       	sbci	r25, 0x00	; 0
 53e:	e1 f7       	brne	.-8      	; 0x538 <Servo_Rotate+0x16>
 540:	00 c0       	rjmp	.+0      	; 0x542 <Servo_Rotate+0x20>
 542:	00 00       	nop
	ocr2_value = (pulse_width_us * 256 / 20000) - 1;
	
	OCR2 = ocr2_value;// Set the OCR2 register
}
void Servo_Rotate(u8 ang){
	for (uint8_t angle = 0; angle <= ang; angle++) {
 544:	cf 5f       	subi	r28, 0xFF	; 255
 546:	dc 17       	cp	r29, r28
 548:	88 f7       	brcc	.-30     	; 0x52c <Servo_Rotate+0xa>
		Servo_SetAngle(angle);
		_delay_ms(1500); // Wait for the servo to move
	}
 54a:	df 91       	pop	r29
 54c:	cf 91       	pop	r28
 54e:	08 95       	ret

00000550 <Timer1_Init>:
volatile uint16_t overflow_count = 0;
volatile u8 timer_active = 0; // Flag to start/stop the timer
volatile u8 action_7s_done = 0; // Flag to indicate if 7s action has been done

void Timer1_Init() {
	TCCR1A = 0; // Normal mode
 550:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1 << CS11) | (1 << CS10); // Prescaler 64
 552:	83 e0       	ldi	r24, 0x03	; 3
 554:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1 << TOIE1); // Enable Timer1 Overflow Interrupt
 556:	89 b7       	in	r24, 0x39	; 57
 558:	84 60       	ori	r24, 0x04	; 4
 55a:	89 bf       	out	0x39, r24	; 57
	sei(); // Enable global interrupts
 55c:	78 94       	sei
 55e:	08 95       	ret

00000560 <Timer1_Start>:
}

void Timer1_Start() {
	// Set the timer_active flag to true
	timer_active = 1;
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <timer_active>
 566:	08 95       	ret

00000568 <Timer1_Stop>:
}

void Timer1_Stop() {
	// Set the timer_active flag to false
	timer_active = 0;
 568:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <timer_active>
	// Reset overflow count and flags
	overflow_count = 0;
 56c:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <overflow_count+0x1>
 570:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <overflow_count>
	action_7s_done = 0;
 574:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 578:	08 95       	ret

0000057a <__vector_9>:
}

ISR(TIMER1_OVF_vect) {
 57a:	1f 92       	push	r1
 57c:	0f 92       	push	r0
 57e:	0f b6       	in	r0, 0x3f	; 63
 580:	0f 92       	push	r0
 582:	11 24       	eor	r1, r1
 584:	2f 93       	push	r18
 586:	3f 93       	push	r19
 588:	4f 93       	push	r20
 58a:	5f 93       	push	r21
 58c:	6f 93       	push	r22
 58e:	7f 93       	push	r23
 590:	8f 93       	push	r24
 592:	9f 93       	push	r25
 594:	af 93       	push	r26
 596:	bf 93       	push	r27
 598:	ef 93       	push	r30
 59a:	ff 93       	push	r31
	if (timer_active) {
 59c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <timer_active>
 5a0:	88 23       	and	r24, r24
 5a2:	41 f1       	breq	.+80     	; 0x5f4 <__vector_9+0x7a>
		overflow_count++;
 5a4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <overflow_count>
 5a8:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <overflow_count+0x1>
 5ac:	01 96       	adiw	r24, 0x01	; 1
 5ae:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <overflow_count+0x1>
 5b2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <overflow_count>
		
		if (overflow_count >= OVERFLOW_COUNT_7S && !action_7s_done) {
 5b6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <overflow_count>
 5ba:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <overflow_count+0x1>
 5be:	07 97       	sbiw	r24, 0x07	; 7
 5c0:	70 f0       	brcs	.+28     	; 0x5de <__vector_9+0x64>
 5c2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 5c6:	81 11       	cpse	r24, r1
 5c8:	0a c0       	rjmp	.+20     	; 0x5de <__vector_9+0x64>
			// 7 seconds have passed
			action_7s_done = 1; // Mark 7s action as done
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			// Move servo to 90 degrees
			TURN_ON_LED('D',6);
 5d0:	66 e0       	ldi	r22, 0x06	; 6
 5d2:	84 e4       	ldi	r24, 0x44	; 68
 5d4:	0e 94 a4 00 	call	0x148	; 0x148 <TURN_ON_LED>
			Servo_Rotate(90);
 5d8:	8a e5       	ldi	r24, 0x5A	; 90
 5da:	0e 94 91 02 	call	0x522	; 0x522 <Servo_Rotate>
		}
		
		if (overflow_count >= OVERFLOW_COUNT_12S) {
 5de:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <overflow_count>
 5e2:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <overflow_count+0x1>
 5e6:	0c 97       	sbiw	r24, 0x0c	; 12
 5e8:	28 f0       	brcs	.+10     	; 0x5f4 <__vector_9+0x7a>
			// 12 seconds have passed
			Timer1_Stop();
 5ea:	0e 94 b4 02 	call	0x568	; 0x568 <Timer1_Stop>
			
			// Activate Watchdog Timer
			WDTCR = (1 << WDE) | (1 << WDP0); // Watchdog timeout of 16ms
 5ee:	89 e0       	ldi	r24, 0x09	; 9
 5f0:	81 bd       	out	0x21, r24	; 33
 5f2:	ff cf       	rjmp	.-2      	; 0x5f2 <__vector_9+0x78>
			while (1); // Infinite loop to trigger watchdog reset
		}
	}
 5f4:	ff 91       	pop	r31
 5f6:	ef 91       	pop	r30
 5f8:	bf 91       	pop	r27
 5fa:	af 91       	pop	r26
 5fc:	9f 91       	pop	r25
 5fe:	8f 91       	pop	r24
 600:	7f 91       	pop	r23
 602:	6f 91       	pop	r22
 604:	5f 91       	pop	r21
 606:	4f 91       	pop	r20
 608:	3f 91       	pop	r19
 60a:	2f 91       	pop	r18
 60c:	0f 90       	pop	r0
 60e:	0f be       	out	0x3f, r0	; 63
 610:	0f 90       	pop	r0
 612:	1f 90       	pop	r1
 614:	18 95       	reti

00000616 <__divsf3>:
 616:	0e 94 1f 03 	call	0x63e	; 0x63e <__divsf3x>
 61a:	0c 94 00 04 	jmp	0x800	; 0x800 <__fp_round>
 61e:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <__fp_pscB>
 622:	58 f0       	brcs	.+22     	; 0x63a <__divsf3+0x24>
 624:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <__fp_pscA>
 628:	40 f0       	brcs	.+16     	; 0x63a <__divsf3+0x24>
 62a:	29 f4       	brne	.+10     	; 0x636 <__divsf3+0x20>
 62c:	5f 3f       	cpi	r21, 0xFF	; 255
 62e:	29 f0       	breq	.+10     	; 0x63a <__divsf3+0x24>
 630:	0c 94 e9 03 	jmp	0x7d2	; 0x7d2 <__fp_inf>
 634:	51 11       	cpse	r21, r1
 636:	0c 94 34 04 	jmp	0x868	; 0x868 <__fp_szero>
 63a:	0c 94 ef 03 	jmp	0x7de	; 0x7de <__fp_nan>

0000063e <__divsf3x>:
 63e:	0e 94 11 04 	call	0x822	; 0x822 <__fp_split3>
 642:	68 f3       	brcs	.-38     	; 0x61e <__divsf3+0x8>

00000644 <__divsf3_pse>:
 644:	99 23       	and	r25, r25
 646:	b1 f3       	breq	.-20     	; 0x634 <__divsf3+0x1e>
 648:	55 23       	and	r21, r21
 64a:	91 f3       	breq	.-28     	; 0x630 <__divsf3+0x1a>
 64c:	95 1b       	sub	r25, r21
 64e:	55 0b       	sbc	r21, r21
 650:	bb 27       	eor	r27, r27
 652:	aa 27       	eor	r26, r26
 654:	62 17       	cp	r22, r18
 656:	73 07       	cpc	r23, r19
 658:	84 07       	cpc	r24, r20
 65a:	38 f0       	brcs	.+14     	; 0x66a <__divsf3_pse+0x26>
 65c:	9f 5f       	subi	r25, 0xFF	; 255
 65e:	5f 4f       	sbci	r21, 0xFF	; 255
 660:	22 0f       	add	r18, r18
 662:	33 1f       	adc	r19, r19
 664:	44 1f       	adc	r20, r20
 666:	aa 1f       	adc	r26, r26
 668:	a9 f3       	breq	.-22     	; 0x654 <__divsf3_pse+0x10>
 66a:	35 d0       	rcall	.+106    	; 0x6d6 <__divsf3_pse+0x92>
 66c:	0e 2e       	mov	r0, r30
 66e:	3a f0       	brmi	.+14     	; 0x67e <__divsf3_pse+0x3a>
 670:	e0 e8       	ldi	r30, 0x80	; 128
 672:	32 d0       	rcall	.+100    	; 0x6d8 <__divsf3_pse+0x94>
 674:	91 50       	subi	r25, 0x01	; 1
 676:	50 40       	sbci	r21, 0x00	; 0
 678:	e6 95       	lsr	r30
 67a:	00 1c       	adc	r0, r0
 67c:	ca f7       	brpl	.-14     	; 0x670 <__divsf3_pse+0x2c>
 67e:	2b d0       	rcall	.+86     	; 0x6d6 <__divsf3_pse+0x92>
 680:	fe 2f       	mov	r31, r30
 682:	29 d0       	rcall	.+82     	; 0x6d6 <__divsf3_pse+0x92>
 684:	66 0f       	add	r22, r22
 686:	77 1f       	adc	r23, r23
 688:	88 1f       	adc	r24, r24
 68a:	bb 1f       	adc	r27, r27
 68c:	26 17       	cp	r18, r22
 68e:	37 07       	cpc	r19, r23
 690:	48 07       	cpc	r20, r24
 692:	ab 07       	cpc	r26, r27
 694:	b0 e8       	ldi	r27, 0x80	; 128
 696:	09 f0       	breq	.+2      	; 0x69a <__divsf3_pse+0x56>
 698:	bb 0b       	sbc	r27, r27
 69a:	80 2d       	mov	r24, r0
 69c:	bf 01       	movw	r22, r30
 69e:	ff 27       	eor	r31, r31
 6a0:	93 58       	subi	r25, 0x83	; 131
 6a2:	5f 4f       	sbci	r21, 0xFF	; 255
 6a4:	3a f0       	brmi	.+14     	; 0x6b4 <__divsf3_pse+0x70>
 6a6:	9e 3f       	cpi	r25, 0xFE	; 254
 6a8:	51 05       	cpc	r21, r1
 6aa:	78 f0       	brcs	.+30     	; 0x6ca <__divsf3_pse+0x86>
 6ac:	0c 94 e9 03 	jmp	0x7d2	; 0x7d2 <__fp_inf>
 6b0:	0c 94 34 04 	jmp	0x868	; 0x868 <__fp_szero>
 6b4:	5f 3f       	cpi	r21, 0xFF	; 255
 6b6:	e4 f3       	brlt	.-8      	; 0x6b0 <__divsf3_pse+0x6c>
 6b8:	98 3e       	cpi	r25, 0xE8	; 232
 6ba:	d4 f3       	brlt	.-12     	; 0x6b0 <__divsf3_pse+0x6c>
 6bc:	86 95       	lsr	r24
 6be:	77 95       	ror	r23
 6c0:	67 95       	ror	r22
 6c2:	b7 95       	ror	r27
 6c4:	f7 95       	ror	r31
 6c6:	9f 5f       	subi	r25, 0xFF	; 255
 6c8:	c9 f7       	brne	.-14     	; 0x6bc <__divsf3_pse+0x78>
 6ca:	88 0f       	add	r24, r24
 6cc:	91 1d       	adc	r25, r1
 6ce:	96 95       	lsr	r25
 6d0:	87 95       	ror	r24
 6d2:	97 f9       	bld	r25, 7
 6d4:	08 95       	ret
 6d6:	e1 e0       	ldi	r30, 0x01	; 1
 6d8:	66 0f       	add	r22, r22
 6da:	77 1f       	adc	r23, r23
 6dc:	88 1f       	adc	r24, r24
 6de:	bb 1f       	adc	r27, r27
 6e0:	62 17       	cp	r22, r18
 6e2:	73 07       	cpc	r23, r19
 6e4:	84 07       	cpc	r24, r20
 6e6:	ba 07       	cpc	r27, r26
 6e8:	20 f0       	brcs	.+8      	; 0x6f2 <__divsf3_pse+0xae>
 6ea:	62 1b       	sub	r22, r18
 6ec:	73 0b       	sbc	r23, r19
 6ee:	84 0b       	sbc	r24, r20
 6f0:	ba 0b       	sbc	r27, r26
 6f2:	ee 1f       	adc	r30, r30
 6f4:	88 f7       	brcc	.-30     	; 0x6d8 <__divsf3_pse+0x94>
 6f6:	e0 95       	com	r30
 6f8:	08 95       	ret

000006fa <__fixunssfsi>:
 6fa:	0e 94 19 04 	call	0x832	; 0x832 <__fp_splitA>
 6fe:	88 f0       	brcs	.+34     	; 0x722 <__fixunssfsi+0x28>
 700:	9f 57       	subi	r25, 0x7F	; 127
 702:	98 f0       	brcs	.+38     	; 0x72a <__fixunssfsi+0x30>
 704:	b9 2f       	mov	r27, r25
 706:	99 27       	eor	r25, r25
 708:	b7 51       	subi	r27, 0x17	; 23
 70a:	b0 f0       	brcs	.+44     	; 0x738 <__fixunssfsi+0x3e>
 70c:	e1 f0       	breq	.+56     	; 0x746 <__fixunssfsi+0x4c>
 70e:	66 0f       	add	r22, r22
 710:	77 1f       	adc	r23, r23
 712:	88 1f       	adc	r24, r24
 714:	99 1f       	adc	r25, r25
 716:	1a f0       	brmi	.+6      	; 0x71e <__fixunssfsi+0x24>
 718:	ba 95       	dec	r27
 71a:	c9 f7       	brne	.-14     	; 0x70e <__fixunssfsi+0x14>
 71c:	14 c0       	rjmp	.+40     	; 0x746 <__fixunssfsi+0x4c>
 71e:	b1 30       	cpi	r27, 0x01	; 1
 720:	91 f0       	breq	.+36     	; 0x746 <__fixunssfsi+0x4c>
 722:	0e 94 33 04 	call	0x866	; 0x866 <__fp_zero>
 726:	b1 e0       	ldi	r27, 0x01	; 1
 728:	08 95       	ret
 72a:	0c 94 33 04 	jmp	0x866	; 0x866 <__fp_zero>
 72e:	67 2f       	mov	r22, r23
 730:	78 2f       	mov	r23, r24
 732:	88 27       	eor	r24, r24
 734:	b8 5f       	subi	r27, 0xF8	; 248
 736:	39 f0       	breq	.+14     	; 0x746 <__fixunssfsi+0x4c>
 738:	b9 3f       	cpi	r27, 0xF9	; 249
 73a:	cc f3       	brlt	.-14     	; 0x72e <__fixunssfsi+0x34>
 73c:	86 95       	lsr	r24
 73e:	77 95       	ror	r23
 740:	67 95       	ror	r22
 742:	b3 95       	inc	r27
 744:	d9 f7       	brne	.-10     	; 0x73c <__fixunssfsi+0x42>
 746:	3e f4       	brtc	.+14     	; 0x756 <__fixunssfsi+0x5c>
 748:	90 95       	com	r25
 74a:	80 95       	com	r24
 74c:	70 95       	com	r23
 74e:	61 95       	neg	r22
 750:	7f 4f       	sbci	r23, 0xFF	; 255
 752:	8f 4f       	sbci	r24, 0xFF	; 255
 754:	9f 4f       	sbci	r25, 0xFF	; 255
 756:	08 95       	ret

00000758 <__floatunsisf>:
 758:	e8 94       	clt
 75a:	09 c0       	rjmp	.+18     	; 0x76e <__floatsisf+0x12>

0000075c <__floatsisf>:
 75c:	97 fb       	bst	r25, 7
 75e:	3e f4       	brtc	.+14     	; 0x76e <__floatsisf+0x12>
 760:	90 95       	com	r25
 762:	80 95       	com	r24
 764:	70 95       	com	r23
 766:	61 95       	neg	r22
 768:	7f 4f       	sbci	r23, 0xFF	; 255
 76a:	8f 4f       	sbci	r24, 0xFF	; 255
 76c:	9f 4f       	sbci	r25, 0xFF	; 255
 76e:	99 23       	and	r25, r25
 770:	a9 f0       	breq	.+42     	; 0x79c <__floatsisf+0x40>
 772:	f9 2f       	mov	r31, r25
 774:	96 e9       	ldi	r25, 0x96	; 150
 776:	bb 27       	eor	r27, r27
 778:	93 95       	inc	r25
 77a:	f6 95       	lsr	r31
 77c:	87 95       	ror	r24
 77e:	77 95       	ror	r23
 780:	67 95       	ror	r22
 782:	b7 95       	ror	r27
 784:	f1 11       	cpse	r31, r1
 786:	f8 cf       	rjmp	.-16     	; 0x778 <__floatsisf+0x1c>
 788:	fa f4       	brpl	.+62     	; 0x7c8 <__floatsisf+0x6c>
 78a:	bb 0f       	add	r27, r27
 78c:	11 f4       	brne	.+4      	; 0x792 <__floatsisf+0x36>
 78e:	60 ff       	sbrs	r22, 0
 790:	1b c0       	rjmp	.+54     	; 0x7c8 <__floatsisf+0x6c>
 792:	6f 5f       	subi	r22, 0xFF	; 255
 794:	7f 4f       	sbci	r23, 0xFF	; 255
 796:	8f 4f       	sbci	r24, 0xFF	; 255
 798:	9f 4f       	sbci	r25, 0xFF	; 255
 79a:	16 c0       	rjmp	.+44     	; 0x7c8 <__floatsisf+0x6c>
 79c:	88 23       	and	r24, r24
 79e:	11 f0       	breq	.+4      	; 0x7a4 <__floatsisf+0x48>
 7a0:	96 e9       	ldi	r25, 0x96	; 150
 7a2:	11 c0       	rjmp	.+34     	; 0x7c6 <__floatsisf+0x6a>
 7a4:	77 23       	and	r23, r23
 7a6:	21 f0       	breq	.+8      	; 0x7b0 <__floatsisf+0x54>
 7a8:	9e e8       	ldi	r25, 0x8E	; 142
 7aa:	87 2f       	mov	r24, r23
 7ac:	76 2f       	mov	r23, r22
 7ae:	05 c0       	rjmp	.+10     	; 0x7ba <__floatsisf+0x5e>
 7b0:	66 23       	and	r22, r22
 7b2:	71 f0       	breq	.+28     	; 0x7d0 <__floatsisf+0x74>
 7b4:	96 e8       	ldi	r25, 0x86	; 134
 7b6:	86 2f       	mov	r24, r22
 7b8:	70 e0       	ldi	r23, 0x00	; 0
 7ba:	60 e0       	ldi	r22, 0x00	; 0
 7bc:	2a f0       	brmi	.+10     	; 0x7c8 <__floatsisf+0x6c>
 7be:	9a 95       	dec	r25
 7c0:	66 0f       	add	r22, r22
 7c2:	77 1f       	adc	r23, r23
 7c4:	88 1f       	adc	r24, r24
 7c6:	da f7       	brpl	.-10     	; 0x7be <__floatsisf+0x62>
 7c8:	88 0f       	add	r24, r24
 7ca:	96 95       	lsr	r25
 7cc:	87 95       	ror	r24
 7ce:	97 f9       	bld	r25, 7
 7d0:	08 95       	ret

000007d2 <__fp_inf>:
 7d2:	97 f9       	bld	r25, 7
 7d4:	9f 67       	ori	r25, 0x7F	; 127
 7d6:	80 e8       	ldi	r24, 0x80	; 128
 7d8:	70 e0       	ldi	r23, 0x00	; 0
 7da:	60 e0       	ldi	r22, 0x00	; 0
 7dc:	08 95       	ret

000007de <__fp_nan>:
 7de:	9f ef       	ldi	r25, 0xFF	; 255
 7e0:	80 ec       	ldi	r24, 0xC0	; 192
 7e2:	08 95       	ret

000007e4 <__fp_pscA>:
 7e4:	00 24       	eor	r0, r0
 7e6:	0a 94       	dec	r0
 7e8:	16 16       	cp	r1, r22
 7ea:	17 06       	cpc	r1, r23
 7ec:	18 06       	cpc	r1, r24
 7ee:	09 06       	cpc	r0, r25
 7f0:	08 95       	ret

000007f2 <__fp_pscB>:
 7f2:	00 24       	eor	r0, r0
 7f4:	0a 94       	dec	r0
 7f6:	12 16       	cp	r1, r18
 7f8:	13 06       	cpc	r1, r19
 7fa:	14 06       	cpc	r1, r20
 7fc:	05 06       	cpc	r0, r21
 7fe:	08 95       	ret

00000800 <__fp_round>:
 800:	09 2e       	mov	r0, r25
 802:	03 94       	inc	r0
 804:	00 0c       	add	r0, r0
 806:	11 f4       	brne	.+4      	; 0x80c <__fp_round+0xc>
 808:	88 23       	and	r24, r24
 80a:	52 f0       	brmi	.+20     	; 0x820 <__fp_round+0x20>
 80c:	bb 0f       	add	r27, r27
 80e:	40 f4       	brcc	.+16     	; 0x820 <__fp_round+0x20>
 810:	bf 2b       	or	r27, r31
 812:	11 f4       	brne	.+4      	; 0x818 <__fp_round+0x18>
 814:	60 ff       	sbrs	r22, 0
 816:	04 c0       	rjmp	.+8      	; 0x820 <__fp_round+0x20>
 818:	6f 5f       	subi	r22, 0xFF	; 255
 81a:	7f 4f       	sbci	r23, 0xFF	; 255
 81c:	8f 4f       	sbci	r24, 0xFF	; 255
 81e:	9f 4f       	sbci	r25, 0xFF	; 255
 820:	08 95       	ret

00000822 <__fp_split3>:
 822:	57 fd       	sbrc	r21, 7
 824:	90 58       	subi	r25, 0x80	; 128
 826:	44 0f       	add	r20, r20
 828:	55 1f       	adc	r21, r21
 82a:	59 f0       	breq	.+22     	; 0x842 <__fp_splitA+0x10>
 82c:	5f 3f       	cpi	r21, 0xFF	; 255
 82e:	71 f0       	breq	.+28     	; 0x84c <__fp_splitA+0x1a>
 830:	47 95       	ror	r20

00000832 <__fp_splitA>:
 832:	88 0f       	add	r24, r24
 834:	97 fb       	bst	r25, 7
 836:	99 1f       	adc	r25, r25
 838:	61 f0       	breq	.+24     	; 0x852 <__fp_splitA+0x20>
 83a:	9f 3f       	cpi	r25, 0xFF	; 255
 83c:	79 f0       	breq	.+30     	; 0x85c <__fp_splitA+0x2a>
 83e:	87 95       	ror	r24
 840:	08 95       	ret
 842:	12 16       	cp	r1, r18
 844:	13 06       	cpc	r1, r19
 846:	14 06       	cpc	r1, r20
 848:	55 1f       	adc	r21, r21
 84a:	f2 cf       	rjmp	.-28     	; 0x830 <__fp_split3+0xe>
 84c:	46 95       	lsr	r20
 84e:	f1 df       	rcall	.-30     	; 0x832 <__fp_splitA>
 850:	08 c0       	rjmp	.+16     	; 0x862 <__stack+0x3>
 852:	16 16       	cp	r1, r22
 854:	17 06       	cpc	r1, r23
 856:	18 06       	cpc	r1, r24
 858:	99 1f       	adc	r25, r25
 85a:	f1 cf       	rjmp	.-30     	; 0x83e <__fp_splitA+0xc>
 85c:	86 95       	lsr	r24
 85e:	71 05       	cpc	r23, r1
 860:	61 05       	cpc	r22, r1
 862:	08 94       	sec
 864:	08 95       	ret

00000866 <__fp_zero>:
 866:	e8 94       	clt

00000868 <__fp_szero>:
 868:	bb 27       	eor	r27, r27
 86a:	66 27       	eor	r22, r22
 86c:	77 27       	eor	r23, r23
 86e:	cb 01       	movw	r24, r22
 870:	97 f9       	bld	r25, 7
 872:	08 95       	ret

00000874 <__divmodhi4>:
 874:	97 fb       	bst	r25, 7
 876:	07 2e       	mov	r0, r23
 878:	16 f4       	brtc	.+4      	; 0x87e <__divmodhi4+0xa>
 87a:	00 94       	com	r0
 87c:	07 d0       	rcall	.+14     	; 0x88c <__divmodhi4_neg1>
 87e:	77 fd       	sbrc	r23, 7
 880:	09 d0       	rcall	.+18     	; 0x894 <__divmodhi4_neg2>
 882:	0e 94 63 04 	call	0x8c6	; 0x8c6 <__udivmodhi4>
 886:	07 fc       	sbrc	r0, 7
 888:	05 d0       	rcall	.+10     	; 0x894 <__divmodhi4_neg2>
 88a:	3e f4       	brtc	.+14     	; 0x89a <__divmodhi4_exit>

0000088c <__divmodhi4_neg1>:
 88c:	90 95       	com	r25
 88e:	81 95       	neg	r24
 890:	9f 4f       	sbci	r25, 0xFF	; 255
 892:	08 95       	ret

00000894 <__divmodhi4_neg2>:
 894:	70 95       	com	r23
 896:	61 95       	neg	r22
 898:	7f 4f       	sbci	r23, 0xFF	; 255

0000089a <__divmodhi4_exit>:
 89a:	08 95       	ret

0000089c <__tablejump2__>:
 89c:	ee 0f       	add	r30, r30
 89e:	ff 1f       	adc	r31, r31
 8a0:	05 90       	lpm	r0, Z+
 8a2:	f4 91       	lpm	r31, Z
 8a4:	e0 2d       	mov	r30, r0
 8a6:	09 94       	ijmp

000008a8 <__umulhisi3>:
 8a8:	a2 9f       	mul	r26, r18
 8aa:	b0 01       	movw	r22, r0
 8ac:	b3 9f       	mul	r27, r19
 8ae:	c0 01       	movw	r24, r0
 8b0:	a3 9f       	mul	r26, r19
 8b2:	70 0d       	add	r23, r0
 8b4:	81 1d       	adc	r24, r1
 8b6:	11 24       	eor	r1, r1
 8b8:	91 1d       	adc	r25, r1
 8ba:	b2 9f       	mul	r27, r18
 8bc:	70 0d       	add	r23, r0
 8be:	81 1d       	adc	r24, r1
 8c0:	11 24       	eor	r1, r1
 8c2:	91 1d       	adc	r25, r1
 8c4:	08 95       	ret

000008c6 <__udivmodhi4>:
 8c6:	aa 1b       	sub	r26, r26
 8c8:	bb 1b       	sub	r27, r27
 8ca:	51 e1       	ldi	r21, 0x11	; 17
 8cc:	07 c0       	rjmp	.+14     	; 0x8dc <__udivmodhi4_ep>

000008ce <__udivmodhi4_loop>:
 8ce:	aa 1f       	adc	r26, r26
 8d0:	bb 1f       	adc	r27, r27
 8d2:	a6 17       	cp	r26, r22
 8d4:	b7 07       	cpc	r27, r23
 8d6:	10 f0       	brcs	.+4      	; 0x8dc <__udivmodhi4_ep>
 8d8:	a6 1b       	sub	r26, r22
 8da:	b7 0b       	sbc	r27, r23

000008dc <__udivmodhi4_ep>:
 8dc:	88 1f       	adc	r24, r24
 8de:	99 1f       	adc	r25, r25
 8e0:	5a 95       	dec	r21
 8e2:	a9 f7       	brne	.-22     	; 0x8ce <__udivmodhi4_loop>
 8e4:	80 95       	com	r24
 8e6:	90 95       	com	r25
 8e8:	bc 01       	movw	r22, r24
 8ea:	cd 01       	movw	r24, r26
 8ec:	08 95       	ret

000008ee <_exit>:
 8ee:	f8 94       	cli

000008f0 <__stop_program>:
 8f0:	ff cf       	rjmp	.-2      	; 0x8f0 <__stop_program>
